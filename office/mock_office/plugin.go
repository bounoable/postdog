// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go

// Package mock_office is a generated GoMock package.
package mock_office

import (
	context "context"
	letter "github.com/bounoable/postdog/letter"
	office "github.com/bounoable/postdog/office"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockPlugin) Install(arg0 office.PluginContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Install", arg0)
}

// Install indicates an expected call of Install
func (mr *MockPluginMockRecorder) Install(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPlugin)(nil).Install), arg0)
}

// MockPluginContext is a mock of PluginContext interface
type MockPluginContext struct {
	ctrl     *gomock.Controller
	recorder *MockPluginContextMockRecorder
}

// MockPluginContextMockRecorder is the mock recorder for MockPluginContext
type MockPluginContextMockRecorder struct {
	mock *MockPluginContext
}

// NewMockPluginContext creates a new mock instance
func NewMockPluginContext(ctrl *gomock.Controller) *MockPluginContext {
	mock := &MockPluginContext{ctrl: ctrl}
	mock.recorder = &MockPluginContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginContext) EXPECT() *MockPluginContextMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *MockPluginContext) Log(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockPluginContextMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockPluginContext)(nil).Log), arg0...)
}

// WithSendHook mocks base method
func (m *MockPluginContext) WithSendHook(arg0 office.SendHook, arg1 ...func(context.Context, letter.Letter)) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WithSendHook", varargs...)
}

// WithSendHook indicates an expected call of WithSendHook
func (mr *MockPluginContextMockRecorder) WithSendHook(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSendHook", reflect.TypeOf((*MockPluginContext)(nil).WithSendHook), varargs...)
}

// WithMiddleware mocks base method
func (m *MockPluginContext) WithMiddleware(arg0 ...office.Middleware) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WithMiddleware", varargs...)
}

// WithMiddleware indicates an expected call of WithMiddleware
func (mr *MockPluginContextMockRecorder) WithMiddleware(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMiddleware", reflect.TypeOf((*MockPluginContext)(nil).WithMiddleware), arg0...)
}
