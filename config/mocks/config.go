// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	context "context"
	postdog "github.com/bounoable/postdog"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransportFactory is a mock of TransportFactory interface
type MockTransportFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTransportFactoryMockRecorder
}

// MockTransportFactoryMockRecorder is the mock recorder for MockTransportFactory
type MockTransportFactoryMockRecorder struct {
	mock *MockTransportFactory
}

// NewMockTransportFactory creates a new mock instance
func NewMockTransportFactory(ctrl *gomock.Controller) *MockTransportFactory {
	mock := &MockTransportFactory{ctrl: ctrl}
	mock.recorder = &MockTransportFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransportFactory) EXPECT() *MockTransportFactoryMockRecorder {
	return m.recorder
}

// Transport mocks base method
func (m *MockTransportFactory) Transport(arg0 context.Context, arg1 map[string]interface{}) (postdog.Transport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transport", arg0, arg1)
	ret0, _ := ret[0].(postdog.Transport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transport indicates an expected call of Transport
func (mr *MockTransportFactoryMockRecorder) Transport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockTransportFactory)(nil).Transport), arg0, arg1)
}
