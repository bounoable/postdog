// Code generated by MockGen. DO NOT EDIT.
// Source: postdog.go

// Package mock_postdog is a generated GoMock package.
package mock_postdog

import (
	context "context"
	postdog "github.com/bounoable/postdog"
	gomock "github.com/golang/mock/gomock"
	mail "net/mail"
	reflect "reflect"
)

// MockTransport is a mock of Transport interface
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockTransport) Send(arg0 context.Context, arg1 postdog.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockTransportMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransport)(nil).Send), arg0, arg1)
}

// MockMail is a mock of Mail interface
type MockMail struct {
	ctrl     *gomock.Controller
	recorder *MockMailMockRecorder
}

// MockMailMockRecorder is the mock recorder for MockMail
type MockMailMockRecorder struct {
	mock *MockMail
}

// NewMockMail creates a new mock instance
func NewMockMail(ctrl *gomock.Controller) *MockMail {
	mock := &MockMail{ctrl: ctrl}
	mock.recorder = &MockMailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMail) EXPECT() *MockMailMockRecorder {
	return m.recorder
}

// Sender mocks base method
func (m *MockMail) Sender() mail.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(mail.Address)
	return ret0
}

// Sender indicates an expected call of Sender
func (mr *MockMailMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockMail)(nil).Sender))
}

// Recipients mocks base method
func (m *MockMail) Recipients() []mail.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recipients")
	ret0, _ := ret[0].([]mail.Address)
	return ret0
}

// Recipients indicates an expected call of Recipients
func (mr *MockMailMockRecorder) Recipients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recipients", reflect.TypeOf((*MockMail)(nil).Recipients))
}

// RFC mocks base method
func (m *MockMail) RFC() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RFC")
	ret0, _ := ret[0].(string)
	return ret0
}

// RFC indicates an expected call of RFC
func (mr *MockMailMockRecorder) RFC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RFC", reflect.TypeOf((*MockMail)(nil).RFC))
}
